rtpois(10, 1)
first_derivative <- function(lambda){
sum(datos)/lambda + n*(-1 - exp(-lambda)/(1-exp(-lambda)))
}
second_derivative <- function(lambda){
algo = exp(-2*lambda)/((1-exp(-lambda)))^2 + exp(-lambda)/(1-exp(-lambda))
n*algo - sum(datos)/lambda^2
}
datos <- rtpois(1000, 1)
n <- length(datos)
eps <- 20
lambda_old = mean(datos)
i = 0
while(eps > 10^(-4)){
lambda_new = lambda_old - first_derivative(lambda_old)/second_derivative(lambda_old)
eps = abs(lambda_new - lambda_old)
lambda_old = lambda_new
i = i + 1
}
print(lambda_new)
first_derivative <- function(lambda){
sum(datos)/lambda + n*(-1 - exp(-lambda)/(1-exp(-lambda)))
}
second_derivative <- function(lambda){
algo = exp(-2*lambda)/((1-exp(-lambda)))^2 + exp(-lambda)/(1-exp(-lambda))
n*algo - sum(datos)/lambda^2
}
datos <- rtpois(1000, 1)
n <- length(datos)
eps <- 20
lambda_old = mean(datos)
i = 0
while(eps > 10^(-4)){
lambda_new = lambda_old - first_derivative(lambda_old)/second_derivative(lambda_old)
eps = abs(lambda_new - lambda_old)
lambda_old = lambda_new
i = i + 1
}
print(lambda_new)
first_derivative <- function(lambda){
sum(datos)/lambda + n*(-1 - exp(-lambda)/(1-exp(-lambda)))
}
second_derivative <- function(lambda){
algo = exp(-2*lambda)/((1-exp(-lambda)))^2 + exp(-lambda)/(1-exp(-lambda))
n*algo - sum(datos)/lambda^2
}
datos <- rtpois(1000, 1)
n <- length(datos)
eps <- 20
lambda_old = mean(datos)
i = 0
while(eps > 10^(-4)){
lambda_new = lambda_old - first_derivative(lambda_old)/second_derivative(lambda_old)
eps = abs(lambda_new - lambda_old)
lambda_old = lambda_new
i = i + 1
}
print(lambda_new)
first_derivative <- function(lambda){
sum(datos)/lambda + n*(-1 - exp(-lambda)/(1-exp(-lambda)))
}
second_derivative <- function(lambda){
algo = exp(-2*lambda)/((1-exp(-lambda)))^2 + exp(-lambda)/(1-exp(-lambda))
n*algo - sum(datos)/lambda^2
}
datos <- rtpois(1000, 1)
n <- length(datos)
eps <- 20
lambda_old = mean(datos)
i = 0
while(eps > 10^(-4)){
lambda_new = lambda_old - first_derivative(lambda_old)/second_derivative(lambda_old)
eps = abs(lambda_new - lambda_old)
lambda_old = lambda_new
i = i + 1
}
print(lambda_new)
first_derivative <- function(lambda){
sum(datos)/lambda + n*(-1 - exp(-lambda)/(1-exp(-lambda)))
}
second_derivative <- function(lambda){
algo = exp(-2*lambda)/((1-exp(-lambda)))^2 + exp(-lambda)/(1-exp(-lambda))
n*algo - sum(datos)/lambda^2
}
datos <- rtpois(1000, 1)
n <- length(datos)
eps <- 20
lambda_old = mean(datos)
i = 0
while(eps > 10^(-4)){
lambda_new = lambda_old - first_derivative(lambda_old)/second_derivative(lambda_old)
eps = abs(lambda_new - lambda_old)
lambda_old = lambda_new
i = i + 1
}
print(lambda_new)
first_derivative <- function(lambda){
sum(datos)/lambda + n*(-1 - exp(-lambda)/(1-exp(-lambda)))
}
second_derivative <- function(lambda){
algo = exp(-2*lambda)/((1-exp(-lambda)))^2 + exp(-lambda)/(1-exp(-lambda))
n*algo - sum(datos)/lambda^2
}
datos <- rtpois(1000, 1)
n <- length(datos)
eps <- 20
lambda_old = mean(datos)
i = 0
while(eps > 10^(-4)){
lambda_new = lambda_old - first_derivative(lambda_old)/second_derivative(lambda_old)
eps = abs(lambda_new - lambda_old)
lambda_old = lambda_new
i = i + 1
}
print(lambda_new)
ma <- read.csv("~/ownCloud/Master/AC/part2/ma.txt", sep="")
View(ma)
View(ma)
ma["Bower99"]
ma["Bower99",]
ma["Bower99","Xt"]
ma["Bower99",c("Xt", "Xp")]
ma["Bower99",c("Xt", "Xp")][1] - ma["Bower99",c("Xt", "Xp")][2]
sqrt(ma[study, "St"]^2/ma[study, "nt"] + ma[study, "Sp"]^2/ma[study, "np"])
study <- "Bower99"
ma[study,c("Xt", "Xp")][1] - ma[study,c("Xt", "Xp")][2]
sqrt(ma[study, "St"]^2/ma[study, "nt"] + ma[study, "Sp"]^2/ma[study, "np"])
sqrt(5.21^2/229 + 19.51^2/233)
sqrt(5.21^2/229 + 19.51^2/233)^2
ma[study, "St"]^2/ma[study, "nt"] + ma[study, "Sp"]^2/ma[study, "np"]
?aov
ma["Xt"]
ma["Xt"]-ma["Xp"]
mean(ma["Xt"]-ma["Xp"])
mean((ma["Xt"]-ma["Xp"])[,1])
oneeffect = ma[study,c("Xt")] - ma[study,c("Xp"]
oneeffect = ma[study,c"Xt"] - ma[study,"Xp"]
oneeffect = ma[study,"Xt"] - ma[study,"Xp"]
oneeffect
effects = ma[,"Xt"] - ma[,"Xp"]
effects
sds = ma[, "St"]^2/ma[, "nt"] + ma[, "Sp"]^2/ma[, "np"]
sds
sdoneffect = ma[study, "St"]^2/ma[study, "nt"] + ma[study, "Sp"]^2/ma[study, "np"]
sdoneffect
vars = ma[, "St"]^2/ma[, "nt"] + ma[, "Sp"]^2/ma[, "np"]
wc = 1/vars
y = sum(wc*effects)/sum(wc)
y
wc
which.max(wc)
sey = 1/sqrt(sum(wc))
sey
c(y - 1.96*sey, y + 1.96*sey)
q = wc*(effects - y)^2
q
q = sum(wc*(effects - y)^2)
q
1 - pchisq(q, 12)
1 - pchisq(q, df = 12)
max(c(0, (q-12)/(sum(wc)- sum(wc^2)/sum(wc))  ))
wc[5]
d = max(c(0, (q-12)/(sum(wc)- sum(wc^2)/sum(wc))  ))
wstar = 1/(d + 1/wc)
wstar
ystar = sum(wstar*effects)/sum(wstar)
ystar
wstar[5]
wstar[5]/sum(wstar)
wstar[5]/sum(wstar)*100
wc[5]/sum(wc)*100
wstar[5]/sum(wstar)*100
ystar = sum(wstar*effects)/sum(wstar)
ystar
sestar = 1/sqrt(sum(wstar))
ystar - 1.96*sestar
c(ystar - 1.96*sestar, ystar + 1.96*sestar)
ma <- read.csv("~/ownCloud/Master/AC/part2/ma.txt", sep="")
study <- "Mochizuki88"
oneeffect = ma[study,c("Xt", "Xp")][1] - ma[study,c("Xt", "Xp")][2]
oneeffect
sdoneffect = ma[study, "St"]^2/ma[study, "nt"] + ma[study, "Sp"]^2/ma[study, "np"]
sdoneffect
effects = ma[,"Xt"] - ma[,"Xp"]
vars = ma[, "St"]^2/ma[, "nt"] + ma[, "Sp"]^2/ma[, "np"]
wc = 1/vars
which.max(wc)
y = sum(wc*effects)/sum(wc)
y
sey = 1/sqrt(sum(wc))
c(y - 1.96*sey, y + 1.96*sey)
q = sum(wc*(effects - y)^2)
q
1 - pchisq(q, 12)
d = max(c(0, (q-12)/(sum(wc)- sum(wc^2)/sum(wc))  ))
d
View(ma)
d = max(c(0, (q-10)/(sum(wc)- sum(wc^2)/sum(wc))  ))
d
d = max(c(0, (q-9)/(sum(wc)- sum(wc^2)/sum(wc))  ))
d
wstar = 1/(d + 1/wc)
wc[5]/sum(wc)*100
wstar[5]/sum(wstar)*100
ystar = sum(wstar*effects)/sum(wstar)
sestar = 1/sqrt(sum(wstar))
c(ystar - 1.96*sestar, ystar + 1.96*sestar)
---
))
weibull_param <- c("lambda" = as.numeric(exp(coef(model1))[1]),
as.numeric("alpha" = coef(model1)[2]))
times <- c(3.1, 1.65, 3.99, 4.27, 4.57, 3.71, 4.54, 3.64, 3.61, 3.22,
3.44, 2.64, 3.79, 4.98, 5.23, 2.53, 4.66, 3.24, 7.3, 3.4)
cens <- c(0,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,0)
data <- data.frame(times, cens)
form <- Surv(times, cens) ~ 1
nonpar <- npsurv(form, type = "fleming-harrington", data = data)
noncens_time <- summary(nonpar)$time
noncens_surv <- summary(nonpar)$surv
na <- -log(noncens_surv)
times <- c(3.1, 1.65, 3.99, 4.27, 4.57, 3.71, 4.54, 3.64, 3.61, 3.22,
3.44, 2.64, 3.79, 4.98, 5.23, 2.53, 4.66, 3.24, 7.3, 3.4)
cens <- c(0,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,0)
data <- data.frame(times, cens)
form <- Surv(times, cens) ~ 1
nonpar <- npsurv(form, type = "fleming-harrington", data = data)
library(survival)
library(rms)
nonpar <- npsurv(form, type = "fleming-harrington", data = data)
noncens_time <- summary(nonpar)$time
noncens_surv <- summary(nonpar)$surv
na <- -log(noncens_surv)
y1 = log(na)
y2 = qnorm(1-exp(-na))
x = log(noncens_time)
par(mfrow = c(1, 2))
plot(x, y1, main = "Weibull goodness of fit")
plot(x, y2, main = "Logn goodness of fit")
par(mfrow = c(1,1))
model1 <- lm(y1 ~ x)
model2 <- lm(y2 ~ x)
weibull_param <- c("lambda" = as.numeric(exp(coef(model1))[1]),
as.numeric("alpha" = coef(model1)[2]))
as.numeric(exp(coef(model1))[1])
weibull_param <- c("lambda" = as.numeric(exp(coef(model1))[1]))
weibull_param <- c("lambda" = as.numeric(exp(coef(model1))[1]), "alpha" = as.numeric(coef(model1)[2]))
(weibull_param <- c("lambda" = as.numeric(exp(coef(model1))[1]),
"alpha" = as.numeric(coef(model1)[2])))
logn_param <- c("mu" = as.numeric(-coef(model2)[1]/coef(model2)[2]))
logn_param <- c("mu" = as.numeric(-coef(model2)[1]/coef(model2)[2]),
"sigma" = as.numeric(1/coef(model2)[2]))
logn_param
times
mean(log(times))
weibull_param["lambda"]
p_alpha = c(0.1, 0.5, 0.9)
lambda = weibull_param[1]
alpha = weibull_param[2]
t_alpha = exp(log(log(1-p_alpha)/(-lambda))/alpha)
t_alpha
times
quantile(times)
?plnorm
qlnorm(p_alpha, meanlog = logn_param[1], sdlog = logn_param[2])
(t_alpha = exp(log(log(1-p_alpha)/(-lambda))/alpha))
data(pbc)
pbc$cens <- as.numeric(pbc$status > 0)
pbc <- pbc[1:312, ]
trt <- Surv(time, cens)~trt
hep <- Surv(time, cens) ~ hepato + sex
model_trt <- npsurv(trt, data = pbc)
model_hep <- npsurv(hep, data = pbc)
par(mfrow = c(1, 2))
survplot(model_trt)
survplot(model_hep)
par(mfrow = c(1, 1))
survplot(model_hep, col = rainbow(4))
survplot(model_hep, col = 1:4)
trt <- Surv(time, cens)~trt
hep <- Surv(time, cens) ~ hepato + sex
model_trt <- npsurv(trt, data = pbc)
model_hep <- npsurv(hep, data = pbc)
par(mfrow = c(1, 2))
survplot(model_trt)
survplot(model_hep, col = 1:4)
par(mfrow = c(1, 1))
form <- Surv(time, cens) ~ trt + hepato*sex
cox <- coxph(form, data = pbc)
summary(cox)
cox
exp(coef(cox))
data(pbc)
pbc$cens <- as.numeric(pbc$status > 0)
pbs$trt <- factor(pbs$trt)
data(pbc)
pbc$cens <- as.numeric(pbc$status > 0)
pbc$trt <- factor(pbc$trt)
pbc <- pbc[1:312, ]
trt <- Surv(time, cens)~trt
hep <- Surv(time, cens) ~ hepato + sex
model_trt <- npsurv(trt, data = pbc)
model_hep <- npsurv(hep, data = pbc)
par(mfrow = c(1, 2))
survplot(model_trt)
survplot(model_hep, col = 1:4)
par(mfrow = c(1, 1))
form <- Surv(time, cens) ~ trt + hepato*sex
cox <- coxph(form, data = pbc)
cox
summary(cox)
library(Epi)
(ctmat <- matrix(c(0, 1, 0, 0, 0, 1, 0, 1), byrow=T, nr = 2))
round(ci.lin(cox1, ctr.mat=ctmat, Exp=T), 3)
round(ci.lin(cox, ctr.mat=ctmat, Exp=T), 3)
A <- matrix(c(1/3, 2/3, 3/4, 1/4), nrow = 2, byrow = T)
B <- matrix(c(1, 0, 0, 1), nrow = 2, byrow = T)
C <- matrix(c(0,1,1,0), nrow = 2, byrow = T)
D <- matrix(c(1/4, 2/4, 0, 1/4, 1/6, 2/6, 2/6, 1/6, 0, 2/7, 5/7,0, 1/8, 1/8, 2/8, 1/2),
nrow = 4, byrow = T)
E <- matrix(c(1/4, 3/4, 0, 0, 1/6, 5/6, 0, 0, 0, 0, 5/7, 2/7, 0, 0, 5/8, 3/8),
nrow = 4, byrow = T)
install.packages("igraph")
install.packages("diagram")
library(diagram)
?plotmat
names <- c("A", "C", "G", "T")
plotmat(A, name = names)
plotmat(B, name = names)
B
plotmat(A, name = names)
plotmat(B, name = names)
plotmat(C, name = names)
plotmat(D, name = names)
plotmat(E, name = names)
names <- c("A", "C", "G", "T")
plotmat(A, name = names)
plotmat(B, name = names)
plotmat(C, name = names)
plotmat(D, name = names)
plotmat(D, name = names)
?plotmat
plotmat(A, name = names, box.size = 1)
plotmat(A, name = names, box.size = 5)
plotmat(A, name = names, box.size = 1/2)
plotmat(A, name = names, box.size = 0.1)
plotmat(A, name = names, relsize = 0.5)
plotmat(A, name = names, relsize = 1)
plotmat(A, name = names, relsize = 0.75)
plotmat(A, name = names, relsize = 0.75)
plotmat(B, name = names, relsize = 0.75)
plotmat(C, name = names, relsize = 0.75)
plotmat(D, name = names, relsize = 0.75)
plotmat(E, name = names, relsize = 0.75)
pi_0 <- c(1/2, 1/2)
P <- matrix(c(3/4, 1/4, 1/2, 1/2), nrow = 2)
pi_0 %*% P
t(pi_0) %*% P
1/2*3/4+1/2*1/2
as.matrix(pi_0) %*% P
t(as.matrix(pi_0)) %*% P
pi_0 <- c(1/2, 1/2)
P <- matrix(c(3/4, 1/4, 1/2, 1/2), nrow = 2, byrow = T)
t(as.matrix(pi_0)) %*% P
pi_0 %*% P
(pi_0 %*% P)[1]
(pi_0 %*% P)[2]
(pi_0 %*% (P %*% P))[1]
(pi_0 %*% (P %*% P))[2]
pi_A <- 0.15; pi_G <- 0.35; pi_C <- 0.35; pi_T <- 0.15
alpha <- 4; beta <- 0.5; gamma <- 0.4; delta <- 0.3; epsilon <- 0.2; zeta <- 4
rate_mat <- function(alpha, beta, gamma, delta, epsilon, zeta,
pi_A, pi_B, pi_C, pi_T){
Q <- matrix(numeric(4*4), nrow = 4)
Q[1, 2] <- alpha * pi_G
Q[1, 3] <- beta * pi_C
Q[1, 4] <- gamma * pi_T
Q[2, 1] <- alpha * pi_A
Q[2, 3] <- delta * pi_C
Q[2, 4] <- epsilon * pi_T
Q[3, 1] <- beta * pi_A
Q[3, 2] <- delta * pi_G
Q[3, 4] <- delta * pi_T
Q[4, 1] <- gamma * pi_A
Q[4, 2] <- epsilon * pi_G
Q[4, 3] <- zeta * pi_C
diag(Q) <- -apply(Q, 1, sum)
return(Q)
}
rate_mat(alpha, beta, gamma, delta, epsilon, zeta,
pi_A, pi_B, pi_C, pi_T)
pi_A <- 0.15; pi_G <- 0.35; pi_C <- 0.35; pi_T <- 0.15
alpha <- 4; beta <- 0.5; gamma <- 0.4; delta <- 0.3; epsilon <- 0.2; zeta <- 4
rate_mat <- function(alpha, beta, gamma, delta, epsilon, zeta,
pi_A, pi_B, pi_C, pi_T){
Q <- matrix(numeric(4*4), nrow = 4)
Q[1, 2] <- alpha * pi_G
Q[1, 3] <- beta * pi_C
Q[1, 4] <- gamma * pi_T
Q[2, 1] <- alpha * pi_A
Q[2, 3] <- delta * pi_C
Q[2, 4] <- epsilon * pi_T
Q[3, 1] <- beta * pi_A
Q[3, 2] <- delta * pi_G
Q[3, 4] <- delta * pi_T
Q[4, 1] <- gamma * pi_A
Q[4, 2] <- epsilon * pi_G
Q[4, 3] <- zeta * pi_C
diag(Q) <- -apply(Q, 1, sum)
return(Q)
}
rate_mat(alpha, beta, gamma, delta, epsilon, zeta,
pi_A, pi_B, pi_C, pi_T)
?expm
expm1()
?expm1
library(Matrix)
?expm
library(Matrix)
P <- expm(Q)
Q <- rate_mat(alpha, beta, gamma, delta, epsilon, zeta,
pi_A, pi_B, pi_C, pi_T)
P <- expm(Q)
P
P <- expm(Q)
rownames(P) <- colnames(P) <-  c("A","G","C","T")
P
markov2 <- function(StateSpace,P,pi0,n){
seq <- character(n)
seq[1] <- sample(StateSpace, 1, replace=TRUE, pi0)
for(k in 1:(n-1)){
seq[k+1] <- sample(StateSpace, 1, replace=TRUE, P[seq[k],])}
return(seq)
}
markov2(rownames(P), P, rep(1/4, 4), 99)
install.packages("ape")
library(ape)
seqs <- c("AJ534526", "AJ534527")
seqbin <- read.GenBank(seqs, species.names = TRUE, as.character = F)
seqbin
seqs <- c("AJ534526", "AJ534527")
seqbin <- read.GenBank(seqs, as.character = T)
seqbin
table(seqbin)
table(seqbin$AJ534526)
table(seqbin$AJ534527)
?dist.dna
dist.dna(seqbin)
dist.dna(s, model = "K80")
s <- read.GenBank(seqs, as.character = T)
dist.dna(s, model = "K80")
s <- read.GenBank(seqs, as.character = F)
dist.dna(s, model = "K80")
dist.dna(s, model = "JC69")
p <- dist.dna(s, model = "JC69")
-3/4 * log(1 - 4 * p/3)
setwd("~/ownCloud/Master/FBIO/Trabajo_fin_asignatura/odseq/odseq/R")
library(msa)
setwd("~/ownCloud/Master/FBIO/Trabajo_fin_asignatura/odseq/odseq")
seqs <- readAAStringSet("PF09274_plus_random.fasta")
seqs
seqs <- seqs[1:311]
seqs
source("https://bioconductor.org/biocLite.R")
biocLite("kebabs")
?spectrum
library(kebabs)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
?spectrumKernel
speck <- spectrumKernel(k = 3, normalized = TRUE)
speck
km <- getKernelMatrix(speck, seqs)
km
km@.Data
class(km@.Data)
class(km)
apply(km, 1, sum)
class(apply(km, 1, sum))
source('~/ownCloud/Master/FBIO/Trabajo_fin_asignatura/odseq/odseq/R/odseq_unaligned.R', echo=TRUE)
try = odseq_unaligned(km, B = 1000)
nrow(km)
source('~/ownCloud/Master/FBIO/Trabajo_fin_asignatura/odseq/odseq/R/odseq_unaligned.R', echo=TRUE)
try = odseq_unaligned(km, B = 1000)
try
sum(try)
source('~/ownCloud/Master/FBIO/Trabajo_fin_asignatura/odseq/odseq/R/odseq.R', echo=TRUE)
m <- msa(seqs)
sum(odseq(m, "affine", B=1000))
sum(odseq(m, "affine", B=1000))
seqs
seqs2 <- seqs[1:250]
km <- getKernelMatrix(speck, seqs2)
try = odseq_unaligned(km, B = 1000)
sum(try)
try
km
source('~/ownCloud/Master/FBIO/Trabajo_fin_asignatura/odseq/odseq/R/odseq_unaligned.R', echo=TRUE)
try = odseq_unaligned(km, B = 1000)
sum(try)
try
?data
dir()
?save
seq
seqs
save(seqs, file = "data/pfam_family_outliers.Rdata")
load("data/pfam_family_outliers.Rdata")
?SpectrumKernel
?SpectrumKernel
?spectrumKernel
?msa
?kebabs
